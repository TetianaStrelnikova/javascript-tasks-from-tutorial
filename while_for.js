/*
1.  Какое последнее значение выведет этот код? Почему?
    let i = 3;
    while (i) {
      alert( i-- );}
    output: остановит цикл при i = 0.
        3,2,1

2.  Для каждого цикла запишите, какие значения он выведет. 
    
    Префиксный вариант ++i: returns new value
    let i = 0;
    while (++i < 5) alert( i );
    output: 1,2,3,4
        Оператор ++i увеличивает i, возвращая new i = 1 , так что в сравнении ++i < 5 будет участвовать i = 1.
        will compare 1<5 True , but alert 1, then 2<5 True, alert 2; 3<5 True, alert 3; 4<5 True, alert 4; 5<5 False

    Постфиксный вариант i++ returns old value
    let i = 0;
    while (i++ < 5) alert( i );
    output: 1,2,3,4,5
        Оператор i++ увеличивает i, возвращая старое old значение, так что в сравнении i++ < 5 будет участвовать старое i = 0.
        will compare 0<5 True , but alert 1, then 1<5 True, alert 2; 2<5 True, alert 3; 3<5 True, alert 4; 4<5, alert 5; 5<5 False

        Увеличение i++ выполняется TYOGETHER WITH проверки условия, значение i при этом  используется, поэтому  разницA между i++ = 0 и ++i = 1.


3.  Для каждого цикла запишите, какие значения он выведет. 
    
    
    for (let i = 0; i < 5; i++) alert( i ); 
    Output:  i++ returns old  value : 1,2,3,4
    
    for (let i = 0; i < 5; ++i) alert( i );
    Output:  ++i returns new  value : 1,2,3,4,5<5 False

    Увеличение i++ выполняется отдельно от проверки условия (2), значение i при этом не используется, поэтому нет никакой разницы между i++ и ++i.


4.  При помощи цикла for выведите чётные числа от 2 до 10.

        for(i=1;i<=10;i++){
            if (i%2==0){console.log(i)}
          }
output:2
4
6
8
10

5.  Перепишите код, заменив цикл for на while, без изменения поведения цикла.

    for (let i = 0; i < 3; i++) {
     alert( `number ${i}!` );
    }
    решение
    let i = 0
    while(i<3){alert( `number ${i}!` );
               i++;}

6.  Напишите цикл, который предлагает prompt ввести число, большее 100. Если посетитель ввёл другое число – попросить ввести ещё раз, и так далее.
    Цикл должен спрашивать число пока либо посетитель не введёт число, большее 100, либо не нажмёт кнопку Отмена (ESC).
    Предполагается, что посетитель вводит только числа. Предусматривать обработку нечисловых строк в этой задаче необязательно.
    решение 1
    let number  = prompt("Enter a number");
    if(number<100)
          { number  = prompt("Enter a number");};
    решение 2 
            let num;
            do{num = prompt("enter a number ");}while(num<100);

7.  Натуральное число, большее 1, называется простым, если оно ни на что не делится, кроме себя и 1.
    Другими словами, n > 1 – простое, если при его делении на любое число кроме 1 и n есть остаток.
    Например, 5 это простое число, оно не может быть разделено без остатка на 2, 3 и 4.
    Напишите код, который выводит все простые числа из интервала от 2 до n.
    Для n = 10 результат должен быть 2,3,5,7.
    P.S. Код также должен легко модифицироваться для любых других интервалов.

решение


let n = 10;
next:
for(i=2;i<=n;i++) //compares that i<=n from i=2
  {for(let a=2;a<i;a++){   //compares that  range a= 2 to a<i
    if(i%a==0){continue next;}} // for every a compares that i%a==0, if it is true...go up the number is not valid!
  alert( i );}  
  
  
  Начинается с 2 потому, что это первое число простых чисел в заданном промежутке. Вложенный счетчик начинается с того же значения переменной, что и основной так как является его проверкой. Логика вложенного цикла - выполняется после начала основного столько раз, сколько будет соблюдаться условие в нем, только после этого основной цикл переходит на вторую итерацию.
Тут проще расписать каждую итерацию чтобы иметь четкое представление работы.

Присвоение значение переменной в основном цикле выполняется один раз и она автоматически будет выведена в результаты, т.е. получаем сразу 2. После этого проверяется условие 2 <= 10. Если условие выполняется, то при следующей итерации к i прибавляется единица.
Но у нас есть проверочный вложенный цикл. Поэтому при соблюдении условия 2 <=10 мы переходим к нему. j = 2, 2 < 2 - ложь, цикл прерывается, итерация завершена. В консоле - 2.
Вторая итерация основного цикла - 3 <=10 - да. Первая итерация вложенного цикла - 2 < 3 - да, 3%2 == 0 - нет. Цикл прерывается. В консоль - 3.
Третья итерация основного цикла - 4 <=10 - да. Первая итерация вложенного цикла - 2 < 4 - да, 4%2 == 0 - да. Перескакиваем это значение в основном цикле. i = 5. Вторая итерация вложенного цикла - 3 < 5 - да, 5%3 == 0 - нет. Цикл прерывается. В консоль - 5.
Четвертая итерация основного цикла - 6 <=10 - да. Первая итерация вложенного цикла - 2 < 6 - да, 6%2 == 0 - да. Перескакиваем это значение в основном цикле. i = 7. Вторая итерация вложенного цикла - 3 < 7 - да, 7%3 == 0 - нет. Цикл прерывается. В консоль - 7.
Пятая итерация основного цикла - 8 <=10 - да. Первая итерация вложенного цикла - 2 < 8 - да, 8%2 == 0 - да. Перескакиваем это значение в основном цикле. i = 9. Вторая итерация вложенного цикла - 3 < 9 - да, 9%3 == 0 - да. Перескакиваем это значение в основном цикле. i = 10.
Шестая итерация основного цикла - 10 <=10 - да. Первая итерация вложенного цикла - 2 < 10- да, 10%2 == 0 - да. Перескакиваем это значение в основном цикле.i = 11. Прерывание основного цикла, так как не выполняется условие - 11 <= 10.
В итоге получаем: 2 3 5 7*/
